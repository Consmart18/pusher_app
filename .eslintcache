[{"C:\\Users\\user\\polling_app\\src\\index.js":"1","C:\\Users\\user\\polling_app\\src\\reportWebVitals.js":"2","C:\\Users\\user\\polling_app\\src\\App.js":"3","C:\\Users\\user\\polling_app\\src\\userComponents\\modal\\index.js":"4","C:\\Users\\user\\polling_app\\src\\userComponents\\state\\index.js":"5","C:\\Users\\user\\polling_app\\src\\userComponents\\states\\index.js":"6","C:\\Users\\user\\polling_app\\src\\userComponents\\states\\states.js":"7","C:\\Users\\user\\polling_app\\src\\userComponents\\header\\nav\\nav.js":"8","C:\\Users\\user\\polling_app\\src\\userComponents\\header\\nav\\navlinks.js":"9","C:\\Users\\user\\polling_app\\src\\userComponents\\footer\\footer.js":"10","C:\\Users\\user\\polling_app\\src\\userComponents\\footer\\allregions.js":"11"},{"size":500,"mtime":1608049692258,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1608049692258,"results":"14","hashOfConfig":"13"},{"size":3241,"mtime":1610286113453,"results":"15","hashOfConfig":"13"},{"size":1089,"mtime":1610288096595,"results":"16","hashOfConfig":"13"},{"size":967,"mtime":1610286559921,"results":"17","hashOfConfig":"13"},{"size":489,"mtime":1609224542032,"results":"18","hashOfConfig":"13"},{"size":473,"mtime":1609347322363,"results":"19","hashOfConfig":"13"},{"size":540,"mtime":1610285769334,"results":"20","hashOfConfig":"13"},{"size":59,"mtime":1609268302755,"results":"21","hashOfConfig":"13"},{"size":516,"mtime":1609271091092,"results":"22","hashOfConfig":"13"},{"size":166,"mtime":1610286184497,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1kglg84",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\user\\polling_app\\src\\index.js",[],["48","49"],"C:\\Users\\user\\polling_app\\src\\reportWebVitals.js",[],"C:\\Users\\user\\polling_app\\src\\App.js",["50"],"import {useState, useEffect} from \"react\"\nimport States from \"./userComponents/states/index\"\nimport * as PusherPushNotifications from \"@pusher/push-notifications-web\"\nimport Pusher from 'pusher-js';\nimport Nav from \"./userComponents/header/nav/nav\";\nimport Footer from \"./userComponents/footer/footer\";\n\nfunction App() {\n  const sampleData = [\n    [ 1, 'Alabama', 0, 0, 0, 0, 0, 0, 0, 0, 'inprogress' ],\n    [ 1, 'Delaware', 0, 0, 0, 0, 0, 0, 0, 0, 'inprogress' ],\n    [ 1, 'Florida', 0, 0, 0, 0, 0, 0, 0, 0, 'inprogress' ],\n    [ 1, 'Hawaii', 0, 0, 0, 0, 0, 0, 0, 0, 'inprogress' ],\n    [ 1, 'Idaho', 0, 0, 0, 0, 0, 0, 0, 0, 'inprogress' ],\n    [ 1, 'Kentucky', 0, 0, 0, 0, 0, 0, 0, 0, 'inprogress' ]\n  ]\n  const [data, updateData] = useState(sampleData)\n  const [total, updateTotal] = useState({message: sampleData[0]})\n  const [subStatus, updateSubStatus] = useState(\"subscribe\")\n\n  const pusher = new Pusher(\"b691171de5f8ac605664\", {\n    cluster: \"mt1\"//process.env.REACT_APP_CLUSTER\n  });\n  console.log(pusher.channel(\"my-channel\"))\n  // const channel = pusher.subscribe('my-channel');\n  \n  // channel.bind('client-voteevent', function(dataFromServer) {\n  //   updateData(data =>{\n  //     // console.log(data.message)\n  //     // console.log({message: data.message.splice(Number(dataFromServer.message[11]), 1, dataFromServer.message)}, \"kkkkkkkkkkkkk\")\n  //     // const arr = [...dat\n  //     data.splice(Number(dataFromServer.message[11]), 1, dataFromServer.message)\n  //     const arr = [...data]\n  //     return arr\n  //   }\n  //   )\n   \n  //   updateTotal(dataFromServer)\n    \n    \n  // });\n  useEffect(async ()=>{\n    const res = await fetch(\"https://cryptic-lake-12063.herokuapp.com/\")\n    const json = await res.json()\n    updateTotal(json)\n    updateData(data =>{\n      data.splice(Number(json.message[11]), 1, json.message)\n      const arr = [...data]\n      return arr\n    }\n    )\n  }, [])\n  const beamsClient = new PusherPushNotifications.Client({\n    instanceId: \"6e70a6a0-a057-4c9d-b88d-95963f7fe209\",\n  })\n\n  beamsClient.start()\n  .then(() => beamsClient.getDeviceId())\n  .then(deviceId => {\n    console.log(deviceId) // Will log something like web-1234-1234-1234-1234\n  }).catch(e => console.error('Could not get device id', e));\n \n  function sub(){\n    if(subStatus === \"unsubscribe\"){\n      beamsClient.start()\n      .then(() => beamsClient.removeDeviceInterest('hello'))\n      .then(() => {\n        // Build something beatiful ðŸŒˆ\n        alert(\"You will not be notified when voting is completed\")\n        updateSubStatus(\"subscribe\")\n      });\n    }\n    beamsClient.start()\n    .then(() => beamsClient.addDeviceInterest('vote-event'))\n    .then(() => {\n      // Build something beatiful ðŸŒˆ\n      alert(\"You will notified when voting is completed\")\n      updateSubStatus(\"unsubscribe\")\n    });\n  }\n\n  return (\n    <div>\n      <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\", backgroundColor:\"#8731D2\"}}><Nav /><button onClick={()=> sub()} style={{height:\"30px\", margin: 15}}>{subStatus}</button></div>\n      <div style={{display:\"flex\", justifyContent:\"space-around\"}}><States total={total} data={data} /></div>\n      <div><Footer/></div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\user\\polling_app\\src\\userComponents\\modal\\index.js",["51","52"],"C:\\Users\\user\\polling_app\\src\\userComponents\\state\\index.js",[],"C:\\Users\\user\\polling_app\\src\\userComponents\\states\\index.js",[],"C:\\Users\\user\\polling_app\\src\\userComponents\\states\\states.js",[],"C:\\Users\\user\\polling_app\\src\\userComponents\\header\\nav\\nav.js",[],"C:\\Users\\user\\polling_app\\src\\userComponents\\header\\nav\\navlinks.js",[],"C:\\Users\\user\\polling_app\\src\\userComponents\\footer\\footer.js",[],"C:\\Users\\user\\polling_app\\src\\userComponents\\footer\\allregions.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":42,"column":13,"nodeType":"59","endLine":52,"endColumn":4},{"ruleId":"60","severity":1,"message":"61","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":18},{"ruleId":"60","severity":1,"message":"64","line":4,"column":11,"nodeType":"62","messageId":"63","endLine":4,"endColumn":18},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'regions' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]